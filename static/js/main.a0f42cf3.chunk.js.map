{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js","Statements.jsx","Range.js","Chart.jsx"],"names":["history","createBrowserHistory","basename","path","exact","component","Statements","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","colors","W","U","R","B","G","attrs","defZero","get","target","name","storageMap","0","1","2","3","4","5","6","undefined","useState","statements","setStatements","maxes","setMaxes","index","setIndex","showing","setShowing","useParams","answers","load","a","fetch","res","yaml","text","console","info","split","forEach","char","idx","response","parseInt","Math","min","test","indexOf","length","Proxy","s","low","high","answer","change","stored","map","Object","entries","find","join","replace","push","useEffect","align","pt","current","q","abs","normalized","keys","k","className","as","i","title","question","onClick","id","justify","flexDir","maxW","minH","borderRadius","direction","isActive","colorScheme","isDisabled","leftIcon","rightIcon","maxH","minW","margin","scores","total","step","from","numSides","size","numPolys","segment","PI","start","thetas","Range","angles","reduce","out","key","xmlns","xmlnsXlink","width","height","viewBox","version","transform","cos","last","dist","points","theta","x","y","sin","circPercent","d","p","cx","cy","r","mask","fill","values","stroke","strokeWidth","incr","href","style","toFixed"],"mappings":"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","file":"static/js/main.a0f42cf3.chunk.js","sourcesContent":["import { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport { createBrowserHistory } from 'history'\nimport Statements from './Statements'\n\nexport default () => {\n  const history = createBrowserHistory()\n\n  return (\n    <Router history={history} basename='/5-color-radar'>\n      <Switch>\n        <Route path='/:answers' exact={false} component={Statements}/>\n        <Route path='/' component={Statements}/>\n      </Switch>\n    </Router>\n  )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode><ChakraProvider>\n    <App />\n  </ChakraProvider></React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as yaml from 'js-yaml'\nimport { useEffect, useState } from 'react'\nimport {\n  Flex, Stack, Box, Spinner, Button, ButtonGroup\n} from '@chakra-ui/react'\nimport {\n  ArrowBackIcon, ArrowForwardIcon, ArrowUpIcon, ArrowDownIcon\n} from '@chakra-ui/icons'\nimport { useLocation } from 'react-router-dom'\nimport { useParams } from 'react-router'\nimport Chart from './Chart'\nimport './Chart.scss'\n\nconst source = (\n  'https://raw.githubusercontent.com/Jerdle-code/color-pie-test/main/readable_questions.txt'\n)\nconst colors = {\n  W: 'white', U: 'blue', R: 'red', B: 'black', G: 'green'\n}\nconst attrs = {\n  W: 'Justice', U: 'Wisdom', R: 'Chaos', B: 'Ambition', G: 'Balance'\n}\n\nconst defZero = {\n  get: (target, name) => (\n    name in target ? target[name] : 0\n  )\n}\n\nconst useQuery = () => (\n  new URLSearchParams(useLocation().search)\n)\n\nconst atob = (b64) => (\n  Buffer.from(b64, 'base64').toString('binary')\n)\nconst btoa = (bin) => (\n  Buffer.from(bin, 'binary').toString('base64')\n)\n\nconst storageMap = {\n  0: -2, 1: -1, 2: 0, 3: 1, 4: 2, 5: null, 6: undefined\n}\n\nexport default ({ history }) => {\n  const [statements, setStatements] = useState()\n  const [maxes, setMaxes] = useState()\n  const [index, setIndex] = useState(0)\n  const [showing, setShowing] = useState(true)\n  const { answers = '' } = useParams()\n  const load = async () => {\n    const res = await fetch(source)\n    const statements = yaml.load(await res.text())\n    console.info(answers)\n    answers.split('').forEach((char, idx) => {\n      statements[idx].response = storageMap[parseInt(char, 36)]\n    })\n    setIndex(Math.min(\n      /6/.test(answers) ? answers.indexOf('6') : answers.length, // '6' === undefined\n      statements.length\n    ))\n    setStatements(statements)\n    const maxes = new Proxy({}, defZero)\n    statements.forEach((s) => {\n      maxes[s.low] += 2\n      maxes[s.high] += 2\n    })\n    setMaxes(maxes)\n  }\n  const answer = (res) => {\n    setStatements((statements) => {\n      const change = [...statements]\n      change[index].response = res\n      const stored = (\n        change.map((s) => (\n          Object.entries(storageMap).find(([key, val]) => val === s.response)[0]\n        ))\n        .join('')\n        .replace(/6+$/g, '')\n      )\n      history.push(stored)\n      return change\n    })\n    setIndex(index + 1)\n  }\n  useEffect(() => load(), [])\n\n  if(!statements) {\n    return (\n      <Stack align='center' pt={10}>\n        <Box>Loading Statements…</Box>\n        <Spinner/>\n      </Stack>\n    )\n  }\n\n  if(!maxes) {\n    return (\n      <Stack align='center' pt={10}>\n        <Box>Processing Statements…</Box>\n        <Spinner/>\n      </Stack>\n    )\n  }\n\n  const current = new Proxy({}, defZero)\n  statements.forEach(q => {\n    if(q.response !== undefined) {\n      if(q.response < 0) {\n        current[q.low] += Math.abs(q.response)\n      } else if(q.response > 0) {\n        current[q.high] += Math.abs(q.response)\n      } else if(q.response === null) {\n        // do nothing for \"don't care\"\n      } else if(q.response === 0) {\n        current[q.low] += 1\n        current[q.high] += 1\n      }\n    }\n  })\n  const normalized = {}\n  Object.keys(colors).forEach(k => normalized[k] = (current[k] ?? 0) / maxes[k])\n\n  return (\n    <Stack className={!showing && 'imageOnly'}>\n      <Flex as='nav' key='head'>\n        {statements.map((q, i) => (\n          <span key={i}\n            className={[\n              index === i ? 'current' : null,\n              q.response !== undefined ? 'done' : 'unanswered',\n              `${q.low}${q.high}`,\n              q.response !== undefined ? `res${q.response}` : null,\n            ].join(' ')}\n            title={`Question #${i + 1}: ${statements[i].question}`}\n            onClick={() => setIndex(i)}\n          ></span>\n        ))}\n      </Flex>\n      <Box id='statements'>\n        <Flex justify='center' align='center' flexDir='column'>\n          <Box maxW={['10rem', '40rem']} minH='3rem'>\n            {statements[index] && <q>{statements[index]?.question}</q>}\n          </Box>\n          {statements[index] &&\n            <Stack pt={5}>\n              <Box id='colors'\n                minH={3} borderRadius={10}\n                className={`${statements[index].low}${statements[index].high}`}\n              ></Box>\n              <Stack direction={['column', 'row']}>\n                <Button\n                  isActive={statements[index].response === -2}\n                  colorScheme='red'\n                  onClick={() => answer(-2)}\n                >Strongly Disagree</Button>\n                <Button\n                  isActive={statements[index].response === -1}\n                  colorScheme='pink'\n                  onClick={() => answer(-1)}\n                >Disagree</Button>\n                <Button\n                  isActive={statements[index].response === 0}\n                  colorScheme='blue'\n                  onClick={() => answer(0)}\n                >Ambivalent</Button>\n                <Button\n                  isActive={statements[index].response === 1}\n                  colorScheme='teal'\n                  onClick={() => answer(1)}\n                >Agree</Button>\n                <Button\n                  isActive={statements[index].response === 2}\n                  colorScheme='green'\n                  onClick={() => answer(2)}\n                >Strongly Agree</Button>\n              </Stack>\n            </Stack>\n          }\n          <ButtonGroup pt={5}>\n            <Button\n              isDisabled={index === 0}\n              colorScheme='purple'\n              leftIcon={<ArrowBackIcon/>}\n              onClick={() => setIndex(index - 1)}\n            >Back</Button>\n            <Button\n              index={index}\n              isDisabled={index >= statements.length}\n              colorScheme='purple'\n              rightIcon={<ArrowForwardIcon/>}\n              onClick={() => answer(null)}\n            >No Opinion</Button>\n          </ButtonGroup>\n        </Flex>\n      </Box>\n      <Button id='qVis'\n        title={`${showing ? 'Hide' : 'Show'} Questions`}\n        maxH='1rem'\n        minW='50%'\n        margin='auto'\n        onClick={() => setShowing(s => !s)}\n      >{showing ? <ArrowUpIcon/> : <ArrowDownIcon/>}</Button>\n      <Chart key='chart' {...{ colors, attrs, scores: normalized }}/>\n    </Stack>\n  )\n}","// https://stackoverflow.com/a/64628011/264008\nexport default function*(total = 0, step = 1, from = 0) {\n  for(let i = 0; i < total; yield from + i++ * step) {}\n}","import Range from './Range'\nimport './App.scss'\n\nexport default ({ colors, attrs, scores }) => {\n  const numSides = Object.keys(colors).length\n  const numPolys = 10\n  const incr = 10\n  const size = numPolys * incr\n  const segment = 2 * Math.PI / numSides\n  const start = Math.PI / 2\n  const thetas = [...Range(numSides, segment, start)]\n  const angles = Object.keys(colors).reduce((out, key, idx) => {\n    out[key] = thetas[idx]\n    return out\n  }, {})\n\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n      width=\"100%\" height=\"100%\"\n      viewBox=\"-110 -110 220 220\"\n      version=\"1.1\"\n      id=\"5-color-radar\"\n    >\n      <title>Magic: The Gathering Five Color Personality Radar Chart</title>\n      {/* The pentagon is taller on top than the bottom & needs to be shifted */}\n      <g transform={`translate(0, ${(size - size * Math.cos(segment / 2)) / 2})`}>\n        {[...Range(numPolys, 1, 1)].map((idx) => {\n          const last = idx === numPolys\n          const dist = idx * incr\n          const points = Object.entries(angles).map(([key, theta]) => (\n            {\n              x: dist * Math.cos(theta),\n              y: dist * -Math.sin(theta),\n              key,\n            }\n          ))\n          const circPercent = 0.7 // percentage of distance to edge to draw color circle\n          return <>\n            {last &&\n              <>\n                <path id='web' key='web'\n                  d={points.map(p => `M0,0l${p.x},${p.y}`).join('')}\n                />\n                {points.map((p, i) => (\n                  <g id={attrs[p.key]} key={attrs[p.key]}>\n                    <circle\n                      cx={circPercent * p.x}\n                      cy={circPercent * p.y}\n                      r={0.4 * size}\n                      mask='url(\"#surround\")'\n                      fill={Object.values(colors)[i]}\n                    >\n                      <title>{attrs[p.key]}</title>\n                    </circle>\n                    <circle\n                      cx={circPercent * p.x}\n                      cy={circPercent * p.y}\n                      r={0.4 * size}\n                      mask='url(\"#outside\")'\n                      fill='none' stroke='black'\n                      strokeWidth={incr / 2}\n                    >\n                      <title>{attrs[p.key]}</title>\n                    </circle>\n                  </g>\n                ))}\n              </>\n            }\n            <g id={`poly${idx}`} key={`poly${idx}`}>\n              {last\n                ? (\n                  <>\n                    <defs>\n                      <polygon id='outer'\n                        points={points.map(p => `${p.x},${p.y}`).join(' ')}\n                      />\n                      <mask id='surround'>\n                        <use id='surrmask' href='#outer'/>\n                      </mask>\n                      <mask id='outside'>\n                        <use id='outmask' href='#outer'/>\n                      </mask>\n                    </defs>\n                    <use href='#outer' className='ring'/>\n                  </>\n                ) : (\n                  <polygon\n                    className='ring '\n                    points={points.map(p => `${p.x},${p.y}`).join(' ')}\n                  />\n                )\n              }\n            </g>\n          </>\n        })}\n        {(() => {\n          const points = Object.entries(scores).map(([key, score], i) => {\n            const r = score * size\n            return {\n              x: r * Math.cos(angles[key]),\n              y: r * -Math.sin(angles[key]),\n              key,\n            }\n          })\n          return (\n            <g>\n              <defs key='defs'>\n                <polygon id='spread'\n                  points={points.map(p => `${p.x},${p.y}`).join(' ')}\n                />\n                <clipPath id='spreadclip'>\n                  <use href='#spread'\n                    transform={`translate(${size},${size})`}\n                  />\n                </clipPath>\n              </defs>\n              <foreignObject\n                key='foreign'\n                x={-size} y={-size}\n                width={size * 2} height={size * 2}\n              >\n                <div id='coloredspread' key='coloredspread'/>\n              </foreignObject>\n              <use key='use' href='#spread' fill='none' stroke='black'/>\n              {points.map((p, i) => (\n                <circle key={p.key}\n                  cx={p.x} cy={p.y} r={0.25 * incr}\n                  className='point'\n                  style={{ fill: colors[p.key] }}\n                >\n                  <title>{`${attrs[p.key]}: ${(scores[p.key] * 100).toFixed(1)}%`}</title>\n                </circle>\n              ))}\n            </g>\n          )\n        })()}\n      </g>\n   </svg>\n  )\n}"],"sourceRoot":""}